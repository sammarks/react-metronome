{"version":3,"file":"index.umd.js","sources":["../src/metronome.worker.js","../src/constants.js","../src/metronome.js"],"sourcesContent":["/* eslint-env worker */\n\nconst worker = () => {\n  const ACTION_START = 'START'\n  const ACTION_STOP = 'STOP'\n  const ACTION_UPDATE = 'UPDATE'\n  const ACTION_TICK = 'TICK'\n\n  const SCHEDULER_INTERVAL = 25\n  let timer = null\n\n  self.onmessage = event => {\n    const { data: { action } } = event\n\n    switch (action) {\n      case ACTION_START:\n        timer = setInterval(\n          () => self.postMessage(ACTION_TICK),\n          SCHEDULER_INTERVAL\n        )\n        break\n\n      case ACTION_STOP:\n        clearInterval(timer)\n        timer = null\n        break\n\n      case ACTION_UPDATE:\n        if (timer) {\n          clearInterval(timer)\n          timer = setInterval(\n            () => self.postMessage(ACTION_TICK),\n            SCHEDULER_INTERVAL\n          )\n        }\n        break\n\n      default:\n        throw new Error(\n          `Action must be of type: ${ACTION_START}, ${ACTION_STOP} or ${\n            ACTION_UPDATE\n          } (received ${action}).`\n        )\n    }\n  }\n}\n\nlet code = worker.toString()\ncode = code.substring(code.indexOf('{') + 1, code.lastIndexOf('}'))\n\nconst blob = new Blob([code], { type: 'application/javascript' })\nconst workerScript = URL.createObjectURL(blob)\n\nexport default workerScript\n","export const ACTION_START = 'START'\nexport const ACTION_STOP = 'STOP'\nexport const ACTION_UPDATE = 'UPDATE'\nexport const ACTION_TICK = 'TICK'\nexport const TICKS_PER_BEAT_BINARY = 16\nexport const TICKS_PER_BEAT_TERNARY = 12\nexport const SECONDS_IN_MINUTE = 60\nexport const SCHEDULE_AHEAD_TIME = 0.1\nexport const NOTE_LENGTH = 0.05\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport metronomeWorker from './metronome.worker'\n\nconst { name: LIB_NAME } = require('../package.json')\nimport {\n  ACTION_START,\n  ACTION_STOP,\n  ACTION_UPDATE,\n  ACTION_TICK,\n  TICKS_PER_BEAT_BINARY,\n  TICKS_PER_BEAT_TERNARY,\n  SECONDS_IN_MINUTE,\n  SCHEDULE_AHEAD_TIME,\n  NOTE_LENGTH,\n} from './constants'\n\nclass Metronome extends React.Component {\n  static propTypes = {\n    tempo: PropTypes.number,\n    beatsPerMeasure: PropTypes.number,\n    subdivision: PropTypes.number,\n    autoplay: PropTypes.bool,\n    beatFrequency: PropTypes.number,\n    beatVolume: PropTypes.number,\n    subdivisionFrequency: PropTypes.number,\n    subdivisionVolume: PropTypes.number,\n    render: PropTypes.func,\n    onTick: PropTypes.func,\n    onSubtick: PropTypes.func,\n    onStart: PropTypes.func,\n    onStop: PropTypes.func,\n  }\n\n  static defaultProps = {\n    tempo: 120,\n    beatsPerMeasure: 4,\n    subdivision: 1,\n    beatFrequency: 880,\n    beatVolume: 1,\n    subdivisionFrequency: 440,\n    subdivisionVolume: 0.5,\n    autoplay: false,\n    render: () => null,\n    onTick: () => {},\n    onSubtick: () => {},\n    onStart: () => {},\n    onStop: () => {},\n  }\n\n  constructor(props) {\n    super(props)\n\n    if (this.props.subdivision < 1 || this.props.subdivision > 4) {\n      throw new Error(\n        `${LIB_NAME}: the \\`subdivision\\` prop must be between 1 and 4.`\n      )\n    }\n\n    this.ticksPerBeat =\n      this.props.beatsPerMeasure % 3 === 0 || this.props.subdivision % 3 === 0\n        ? TICKS_PER_BEAT_TERNARY\n        : TICKS_PER_BEAT_BINARY\n    this.timerWorker = new Worker(metronomeWorker)\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n    this.nextNoteTime = 0\n    this.currentBeat = 0\n\n    this.state = {\n      beat: 0,\n      subBeat: 0,\n      playing: this.props.autoplay === true,\n      tempo: this.props.tempo,\n      beatsPerMeasure: this.props.beatsPerMeasure,\n      subdivision: this.props.subdivision,\n    }\n  }\n\n  componentDidMount() {\n    this.timerWorker.onmessage = event => {\n      if (event.data === ACTION_TICK) {\n        this.runScheduler()\n      }\n    }\n\n    this.state.playing && this.start()\n  }\n\n  componentWillUnmount() {\n    this.timerWorker.postMessage({\n      action: ACTION_STOP,\n    })\n  }\n\n  runScheduler = () => {\n    while (\n      this.nextNoteTime <\n      this.audioContext.currentTime + SCHEDULE_AHEAD_TIME\n    ) {\n      this.tick(this.currentBeat, this.nextNoteTime)\n\n      const secondsPerBeat = SECONDS_IN_MINUTE / this.state.tempo\n      this.nextNoteTime +=\n        this.state.beatsPerMeasure / this.ticksPerBeat * secondsPerBeat\n      this.currentBeat++\n\n      if (this.currentBeat === this.ticksPerBeat) {\n        this.currentBeat = 0\n      }\n    }\n  }\n\n  tick = (beat, time) => {\n    const isFirstBeat = beat === 0\n    const isQuarterBeat =\n      beat % (this.ticksPerBeat / this.state.beatsPerMeasure) === 0\n    const isTripletBeat =\n      this.ticksPerBeat === TICKS_PER_BEAT_TERNARY &&\n      beat % (this.ticksPerBeat / this.state.beatsPerMeasure) !== 0\n    const isEighthBeat =\n      beat % (this.ticksPerBeat / (this.state.beatsPerMeasure * 2)) === 0\n\n    let playTick = false\n\n    const osc = this.audioContext.createOscillator()\n    const gainNode = this.audioContext.createGain()\n    osc.connect(gainNode)\n    gainNode.connect(this.audioContext.destination)\n\n    if (this.state.subdivision === 4) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (this.state.subdivision === 3 && isTripletBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (this.state.subdivision === 2 && isEighthBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isQuarterBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isFirstBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.beatFrequency,\n        this.audioContext.currentTime,\n        0.0001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.beatVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isFirstBeat || isQuarterBeat) {\n      this.setState(\n        state => ({\n          beat:\n            state.beat === this.state.beatsPerMeasure ? 1 : state.beat + 1 || 1,\n        }),\n        () => {\n          this.props.onTick(this.state)\n        }\n      )\n    }\n\n    if (playTick) {\n      osc.start(time)\n      osc.stop(time + NOTE_LENGTH)\n\n      this.setState(\n        state => ({\n          subBeat:\n            state.subBeat === this.state.subdivision\n              ? 1\n              : state.subBeat + 1 || 1,\n        }),\n        () => {\n          this.props.onSubtick(this.state)\n        }\n      )\n    }\n  }\n\n  start = () => {\n    this.currentBeat = 0\n    this.nextNoteTime = this.audioContext.currentTime\n\n    this.timerWorker.postMessage({\n      action: ACTION_START,\n      tempo: this.state.tempo,\n      subdivision: this.state.subdivision,\n    })\n\n    this.setState(\n      {\n        beat: 0,\n        playing: true,\n      },\n      () => {\n        this.props.onStart(this.state)\n      }\n    )\n  }\n\n  stop = () => {\n    this.timerWorker.postMessage({\n      action: ACTION_STOP,\n    })\n\n    this.setState(\n      {\n        playing: false,\n      },\n      () => {\n        this.props.onStop(this.state)\n      }\n    )\n  }\n\n  onPlay = () => {\n    this.state.playing ? this.stop() : this.start()\n  }\n\n  onTempoChange = tempo => {\n    this.timerWorker.postMessage({\n      action: ACTION_UPDATE,\n    })\n\n    this.setState({\n      tempo,\n    })\n  }\n\n  render() {\n    return this.props.render({\n      ...this.state,\n      onTempoChange: this.onTempoChange,\n      onPlay: this.onPlay,\n    })\n  }\n}\n\nexport default Metronome\n"],"names":["code","ACTION_START","ACTION_STOP","ACTION_UPDATE","ACTION_TICK","timer","onmessage","action","event","data","setInterval","self","postMessage","Error","toString","substring","indexOf","lastIndexOf","blob","Blob","type","workerScript","URL","createObjectURL","LIB_NAME","require","name","Metronome","React","Component","timerWorker","runScheduler","state","playing","this","start","props","render","onTempoChange","onPlay","_this","nextNoteTime","audioContext","currentTime","tick","currentBeat","secondsPerBeat","tempo","beatsPerMeasure","ticksPerBeat","beat","time","isFirstBeat","isQuarterBeat","isTripletBeat","isEighthBeat","playTick","osc","createOscillator","gainNode","createGain","connect","destination","subdivision","frequency","setTargetAtTime","subdivisionFrequency","gain","subdivisionVolume","beatFrequency","beatVolume","setState","onTick","stop","subBeat","onSubtick","onStart","onStop","Worker","metronomeWorker","window","AudioContext","webkitAudioContext","autoplay","propTypes","PropTypes","number","bool","func","defaultProps"],"mappings":"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"}