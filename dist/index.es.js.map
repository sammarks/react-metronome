{"version":3,"file":"index.es.js","sources":["../src/metronome.worker.js","../src/constants.js","../src/metronome.js"],"sourcesContent":["/* eslint-env worker */\n\nconst worker = () => {\n  const ACTION_START = 'START'\n  const ACTION_STOP = 'STOP'\n  const ACTION_UPDATE = 'UPDATE'\n  const ACTION_TICK = 'TICK'\n\n  const SCHEDULER_INTERVAL = 25\n  let timer = null\n\n  self.onmessage = event => {\n    const { data: { action } } = event\n\n    switch (action) {\n      case ACTION_START:\n        timer = setInterval(\n          () => self.postMessage(ACTION_TICK),\n          SCHEDULER_INTERVAL\n        )\n        break\n\n      case ACTION_STOP:\n        clearInterval(timer)\n        timer = null\n        break\n\n      case ACTION_UPDATE:\n        if (timer) {\n          clearInterval(timer)\n          timer = setInterval(\n            () => self.postMessage(ACTION_TICK),\n            SCHEDULER_INTERVAL\n          )\n        }\n        break\n\n      default:\n        throw new Error(\n          `Action must be of type: ${ACTION_START}, ${ACTION_STOP} or ${\n            ACTION_UPDATE\n          } (received ${action}).`\n        )\n    }\n  }\n}\n\nlet code = worker.toString()\ncode = code.substring(code.indexOf('{') + 1, code.lastIndexOf('}'))\n\nconst blob = new Blob([code], { type: 'application/javascript' })\nconst workerScript = URL.createObjectURL(blob)\n\nexport default workerScript\n","export const ACTION_START = 'START'\nexport const ACTION_STOP = 'STOP'\nexport const ACTION_UPDATE = 'UPDATE'\nexport const ACTION_TICK = 'TICK'\nexport const TICKS_PER_BEAT_BINARY = 16\nexport const TICKS_PER_BEAT_TERNARY = 12\nexport const SECONDS_IN_MINUTE = 60\nexport const SCHEDULE_AHEAD_TIME = 0.1\nexport const NOTE_LENGTH = 0.05\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport metronomeWorker from './metronome.worker'\n\nconst { name: LIB_NAME } = require('../package.json')\nimport {\n  ACTION_START,\n  ACTION_STOP,\n  ACTION_UPDATE,\n  ACTION_TICK,\n  TICKS_PER_BEAT_BINARY,\n  TICKS_PER_BEAT_TERNARY,\n  SECONDS_IN_MINUTE,\n  SCHEDULE_AHEAD_TIME,\n  NOTE_LENGTH,\n} from './constants'\n\nclass Metronome extends React.Component {\n  static propTypes = {\n    tempo: PropTypes.number,\n    beatsPerMeasure: PropTypes.number,\n    subdivision: PropTypes.number,\n    autoplay: PropTypes.bool,\n    beatFrequency: PropTypes.number,\n    beatVolume: PropTypes.number,\n    subdivisionFrequency: PropTypes.number,\n    subdivisionVolume: PropTypes.number,\n    render: PropTypes.func,\n    onTick: PropTypes.func,\n    onSubtick: PropTypes.func,\n    onStart: PropTypes.func,\n    onStop: PropTypes.func,\n  }\n\n  static defaultProps = {\n    tempo: 120,\n    beatsPerMeasure: 4,\n    subdivision: 1,\n    beatFrequency: 880,\n    beatVolume: 1,\n    subdivisionFrequency: 440,\n    subdivisionVolume: 0.5,\n    autoplay: false,\n    render: () => null,\n    onTick: () => {},\n    onSubtick: () => {},\n    onStart: () => {},\n    onStop: () => {},\n  }\n\n  constructor(props) {\n    super(props)\n\n    if (this.props.subdivision < 1 || this.props.subdivision > 4) {\n      throw new Error(\n        `${LIB_NAME}: the \\`subdivision\\` prop must be between 1 and 4.`\n      )\n    }\n\n    this.ticksPerBeat =\n      this.props.beatsPerMeasure % 3 === 0 || this.props.subdivision % 3 === 0\n        ? TICKS_PER_BEAT_TERNARY\n        : TICKS_PER_BEAT_BINARY\n    this.timerWorker = new Worker(metronomeWorker)\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n    this.nextNoteTime = 0\n    this.currentBeat = 0\n\n    this.state = {\n      beat: 0,\n      subBeat: 0,\n      playing: this.props.autoplay === true,\n      tempo: this.props.tempo,\n      beatsPerMeasure: this.props.beatsPerMeasure,\n      subdivision: this.props.subdivision,\n    }\n  }\n\n  componentDidMount() {\n    this.timerWorker.onmessage = event => {\n      if (event.data === ACTION_TICK) {\n        this.runScheduler()\n      }\n    }\n\n    this.state.playing && this.start()\n  }\n\n  componentWillUnmount() {\n    this.timerWorker.postMessage({\n      action: ACTION_STOP,\n    })\n  }\n\n  runScheduler = () => {\n    while (\n      this.nextNoteTime <\n      this.audioContext.currentTime + SCHEDULE_AHEAD_TIME\n    ) {\n      this.tick(this.currentBeat, this.nextNoteTime)\n\n      const secondsPerBeat = SECONDS_IN_MINUTE / this.state.tempo\n      this.nextNoteTime +=\n        this.state.beatsPerMeasure / this.ticksPerBeat * secondsPerBeat\n      this.currentBeat++\n\n      if (this.currentBeat === this.ticksPerBeat) {\n        this.currentBeat = 0\n      }\n    }\n  }\n\n  tick = (beat, time) => {\n    const isFirstBeat = beat === 0\n    const isQuarterBeat =\n      beat % (this.ticksPerBeat / this.state.beatsPerMeasure) === 0\n    const isTripletBeat =\n      this.ticksPerBeat === TICKS_PER_BEAT_TERNARY &&\n      beat % (this.ticksPerBeat / this.state.beatsPerMeasure) !== 0\n    const isEighthBeat =\n      beat % (this.ticksPerBeat / (this.state.beatsPerMeasure * 2)) === 0\n\n    let playTick = false\n\n    const osc = this.audioContext.createOscillator()\n    const gainNode = this.audioContext.createGain()\n    osc.connect(gainNode)\n    gainNode.connect(this.audioContext.destination)\n\n    if (this.state.subdivision === 4) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (this.state.subdivision === 3 && isTripletBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (this.state.subdivision === 2 && isEighthBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.subdivisionVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isQuarterBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.subdivisionFrequency,\n        this.audioContext.currentTime,\n        0.001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.beatVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isFirstBeat) {\n      playTick = true\n      osc.frequency.setTargetAtTime(\n        this.props.beatFrequency,\n        this.audioContext.currentTime,\n        0.0001\n      )\n      gainNode.gain.setTargetAtTime(\n        this.props.beatVolume,\n        this.audioContext.currentTime,\n        0.001\n      )\n    }\n\n    if (isFirstBeat || isQuarterBeat) {\n      this.setState(\n        state => ({\n          beat:\n            state.beat === this.state.beatsPerMeasure ? 1 : state.beat + 1 || 1,\n        }),\n        () => {\n          this.props.onTick(this.state)\n        }\n      )\n    }\n\n    if (playTick) {\n      osc.start(time)\n      osc.stop(time + NOTE_LENGTH)\n\n      this.setState(\n        state => ({\n          subBeat:\n            state.subBeat === this.state.subdivision\n              ? 1\n              : state.subBeat + 1 || 1,\n        }),\n        () => {\n          this.props.onSubtick(this.state)\n        }\n      )\n    }\n  }\n\n  start = () => {\n    this.currentBeat = 0\n    this.nextNoteTime = this.audioContext.currentTime\n\n    this.timerWorker.postMessage({\n      action: ACTION_START,\n      tempo: this.state.tempo,\n      subdivision: this.state.subdivision,\n    })\n\n    this.setState(\n      {\n        beat: 0,\n        playing: true,\n      },\n      () => {\n        this.props.onStart(this.state)\n      }\n    )\n  }\n\n  stop = () => {\n    this.timerWorker.postMessage({\n      action: ACTION_STOP,\n    })\n\n    this.setState(\n      {\n        playing: false,\n      },\n      () => {\n        this.props.onStop(this.state)\n      }\n    )\n  }\n\n  onPlay = () => {\n    this.state.playing ? this.stop() : this.start()\n  }\n\n  onTempoChange = tempo => {\n    this.timerWorker.postMessage({\n      action: ACTION_UPDATE,\n    })\n\n    this.setState({\n      tempo,\n    })\n  }\n\n  render() {\n    return this.props.render({\n      ...this.state,\n      onTempoChange: this.onTempoChange,\n      onPlay: this.onPlay,\n    })\n  }\n}\n\nexport default Metronome\n"],"names":["worker","ACTION_START","ACTION_STOP","ACTION_UPDATE","ACTION_TICK","SCHEDULER_INTERVAL","timer","onmessage","action","event","data","setInterval","self","postMessage","Error","code","toString","substring","indexOf","lastIndexOf","blob","Blob","type","workerScript","URL","createObjectURL","TICKS_PER_BEAT_BINARY","TICKS_PER_BEAT_TERNARY","SECONDS_IN_MINUTE","SCHEDULE_AHEAD_TIME","NOTE_LENGTH","require","LIB_NAME","name","Metronome","props","runScheduler","nextNoteTime","audioContext","currentTime","tick","currentBeat","secondsPerBeat","state","tempo","beatsPerMeasure","ticksPerBeat","beat","time","isFirstBeat","isQuarterBeat","isTripletBeat","isEighthBeat","playTick","osc","createOscillator","gainNode","createGain","connect","destination","subdivision","frequency","setTargetAtTime","subdivisionFrequency","gain","subdivisionVolume","beatVolume","beatFrequency","setState","onTick","start","stop","subBeat","onSubtick","timerWorker","onStart","onStop","onPlay","playing","onTempoChange","Worker","metronomeWorker","window","AudioContext","webkitAudioContext","autoplay","render","React","Component","propTypes","PropTypes","number","bool","func","defaultProps"],"mappings":"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"}